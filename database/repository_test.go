package database

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// TestToSnakeCase tests the toSnakeCase function with various inputs
func TestToSnakeCase(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Empty string",
			input:    "",
			expected: "",
		},
		{
			name:     "Single lowercase word",
			input:    "hello",
			expected: "hello",
		},
		{
			name:     "Single uppercase word",
			input:    "HELLO",
			expected: "hello",
		},
		{
			name:     "Camel case",
			input:    "helloWorld",
			expected: "hello_world",
		},
		{
			name:     "Pascal case",
			input:    "HelloWorld",
			expected: "hello_world",
		},
		{
			name:     "Multiple uppercase letters in sequence",
			input:    "HTTPRequest",
			expected: "http_request",
		},
		{
			name:     "Already snake case",
			input:    "hello_world",
			expected: "hello_world",
		},
		{
			name:     "Mixed case with numbers",
			input:    "User123Name",
			expected: "user123_name",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := toSnakeCase(tt.input)
			assert.Equal(t, tt.expected, result, "toSnakeCase(%q) should equal %q", tt.input, tt.expected)
		})
	}
}

// TestModel is a test model that implements the Model interface for testing deconstruct
type TestModel struct {
	ID      int    `tracks:"id,primarykey,autogen"`
	Name    string `tracks:"name"`
	Email   string `tracks:"email,omitempty"`
	Ignored string `tracks:"-"`
	NoTag   string
	Model   string `tracks:"test_models"`
}

func (m TestModel) TableName() string {
	return "test_models"
}

func (m TestModel) Fields() []string {
	return []string{"id", "name", "email"}
}

func (m TestModel) Values() []any {
	return []any{m.ID, m.Name, m.Email}
}

func (m TestModel) Scan(row Scanner) (TestModel, error) {
	return m, nil
}

func (m TestModel) HasAutoIncrementID() bool {
	return true
}

func (m TestModel) GetID() any {
	return m.ID
}

// TestDeconstruct tests the deconstruct function
func TestDeconstruct(t *testing.T) {
	expected := DD[TestModel]{
		TableName: "test_models",
		Fields: []field{
			{
				Index:         0,
				Name:          "id",
				PrimaryKey:    true,
				Autogenerated: true,
				OmitEmpty:     false,
			},
			{
				Index:         1,
				Name:          "name",
				PrimaryKey:    false,
				Autogenerated: false,
				OmitEmpty:     false,
			},
			{
				Index:         2,
				Name:          "email",
				PrimaryKey:    false,
				Autogenerated: false,
				OmitEmpty:     true,
			},
			{
				Index:         4,
				Name:          "NoTag",
				PrimaryKey:    false,
				Autogenerated: false,
				OmitEmpty:     false,
			},
		},
		FieldNames: []string{"id", "name", "email", "NoTag"},
		ID: field{
			Index:         0,
			Name:          "id",
			PrimaryKey:    true,
			Autogenerated: true,
			OmitEmpty:     false,
		},
	}

	result := deconstruct[TestModel]()

	// Check TableName
	assert.Equal(t, expected.TableName, result.TableName, "TableName should match")

	// Check Fields length
	assert.Len(t, result.Fields, len(expected.Fields), "Fields length should match")

	// Check each field
	for i, expectedField := range expected.Fields {
		assert.Equal(t, expectedField.Index, result.Fields[i].Index, "Field[%d].Index should match", i)
		assert.Equal(t, expectedField.Name, result.Fields[i].Name, "Field[%d].Name should match", i)
		assert.Equal(t, expectedField.PrimaryKey, result.Fields[i].PrimaryKey, "Field[%d].PrimaryKey should match", i)
		assert.Equal(t, expectedField.Autogenerated, result.Fields[i].Autogenerated, "Field[%d].Autogenerated should match", i)
		assert.Equal(t, expectedField.OmitEmpty, result.Fields[i].OmitEmpty, "Field[%d].OmitEmpty should match", i)
	}

	// Check FieldNames
	assert.Equal(t, expected.FieldNames, result.FieldNames, "FieldNames should match")

	// Check ID field
	assert.Equal(t, expected.ID.Index, result.ID.Index, "ID.Index should match")
	assert.Equal(t, expected.ID.Name, result.ID.Name, "ID.Name should match")
	assert.Equal(t, expected.ID.PrimaryKey, result.ID.PrimaryKey, "ID.PrimaryKey should match")
	assert.Equal(t, expected.ID.Autogenerated, result.ID.Autogenerated, "ID.Autogenerated should match")
	assert.Equal(t, expected.ID.OmitEmpty, result.ID.OmitEmpty, "ID.OmitEmpty should match")
}
